# 구현

# # 방향벡터
# dx = [0, -1, 0, 1]
# dy = [1, 0, -1, 0]
#
# x, y = 2, 2
#
# for i in range(4):
#     nx = x + dx[i]
#     ny = y + dy[i]
#     print(nx, ny)

##### 시각
# 정수 N이 입력되면 00시 00분 00초부터 N시 59분 59초까지의 모든 시각 중에서 3이 하나라도 포함되는 모든 경우의 수를 구하는 프로그램을 작성하세요. 예를 들어 1을 ㄹ입력했을 때 다음은 3이 하나라도 포함되어 있으므로 세어야 하는 시각이다.
# 00시 00분 03초
# 00시 13분 30초
# 반면에 다음은 ㄷ이 하나도 포함되어 있지 않으므로 세면 안되는 시각이다.
# 00시 02분 55초
# 01시 27분 45초

# -> 대표적인 완전탐색 유형

# 하루는 86400초 ( 24 * 60 * 60 ) 이므로 가능한 경우의 수를 모두 검사해보는 탐색 방법 -> 브루트 포스

# h = int(input())
#
# count = 0
# for i in range(h + 1):
#     for j in range(60):
#         for k in range(60):
#             if '3' in str(i) + str(j) + str(k):
#                 count += 1
# print(count)

##### 상하좌우
# 여행가 A는 N * N 크기의 정사각형 공간 위에 서있다. 이 공간은 1 * 1 크기의 정사각형으로 나누어져 있다. 가장 왼쪽 위 좌표는 (1,1) 가장 오른쪽 아래좌표는 (N,N)
# 여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1,1)이다. 우리 앞에는 여행가 A가 이동할 계획이 적인 계획서가 있다.
# 계획서에는 하나의 줄에 띄어쓰기를 기준으로 하여 L, R, U, D 중 하나의 문자가 반복적으로 적혀있다.
# 이때 여행가 A가 N * N 크기의 정사각형 공간을 벗어나느 움직임은 무시된다.

# 방향벡터 활용

n = int(input())
x, y = 1, 1
plans = input().split()

dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move_types = ['L', 'R', 'U', 'D']

for plan in plans:
    for i in range(len(move_types)):
        if plan == move_types[i]:
            nx = x + dx[i]
            ny = y + dy[i]

    if nx < 1 or ny < 1 or nx > n or ny > n:
        continue
    x, y = nx, ny

print(x, y)
